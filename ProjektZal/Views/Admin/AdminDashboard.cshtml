@model ProjektZal.Controllers.AdminDashboardViewModel
@{
    ViewData["Title"] = "Panel Administratora";
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<main class="admin-db-container">
    <div class="admin-dashboard">
        <div class="admin-db-header">
            <h1 class="admin-db-title">Witaj, Administratorze</h1>
            <p class="admin-db-subtitle">Wybierz sekcję, którą chcesz zarządzać:</p>
        </div>

        <div class="admin-dashboard-grid">
            <!-- Sekcja lewa: Wykres -->
            <div class="chart-container">
                <canvas id="ordersChart"></canvas>
            </div>

            <!-- Sekcja prawa: Przyciski -->
            <div class="dashboard-right">
                <h3 class="section-title">Wybierz czynność</h3>
                <div class="admin-db-buttons">
                    <button class="btn-login" id="usersButton">Użytkownicy</button>
                    <button class="btn-login" id="productsButton">Sklep</button>
                    <button class="btn-login" id="ordersButton">Zamówienia</button>
                    <button class="btn-login" id="addProductButton">Dodaj produkt</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Pop-up użytkowników -->
    <div class="admin-db-popup" id="usersPopup">
        <div class="admin-db-popup-content">
            <span class="admin-db-close" onclick="closePopup('usersPopup')">&times;</span>
            <h3 class="popup-title">Lista użytkowników</h3>
            <form id="searchUsersForm" class="admin-db-search">
                <input type="text" id="searchUsersInput" placeholder="Wyszukaj użytkownika..." class="admin-db-input" />
                <button type="button" id="searchUsersButton" class="btn-login">Szukaj</button>
            </form>
            <div id="usersList" class="users-grid">
                @foreach (var user in Model.Users)
                {
                    <div class="user-card">
                        <p><strong>Imię:</strong> @user.Name</p>
                        <p><strong>Email:</strong> @user.Email</p>
                        <form asp-action="DeleteUser" method="post" class="delete-form">
                            <input type="hidden" name="id" value="@user.Id" />
                            <button type="submit" class="btn-delete">Usuń</button>
                        </form>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Pop-up produktów -->
    <div class="admin-db-popup" id="productsPopup">
        <div class="admin-db-popup-content">
            <span class="admin-db-close" onclick="closePopup('productsPopup')">&times;</span>
            <h3 class="popup-title">Produkty</h3>
            <form id="searchProductsForm" class="admin-db-search">
                <input type="text" id="searchProductsInput" placeholder="Wyszukaj produkt..." class="admin-db-input" />
                <button type="button" id="searchProductsButton" class="btn-login">Szukaj</button>
            </form>
            <div id="productsList" class="products-grid">
                @foreach (var product in Model.Products)
                {
                    <div class="product-card">
                        <h4>@product.Name</h4>
                        <p><strong>Cena:</strong> @product.Price zł</p>
                        <p><strong>Stan:</strong> @product.Stock szt.</p>
                        <p>@product.Description</p>
                        <button class="btn-edit" onclick="openEditPopup(@product.Id)">Edytuj</button>
                        <form method="post" asp-action="DeleteProduct" asp-controller="Admin" style="display: inline;">
                            <input type="hidden" name="id" value="@product.Id" />
                            <button type="submit" class="btn-delete"
                                    onclick="return confirm('Czy na pewno chcesz usunąć ten produkt?')">
                                Usuń
                            </button>
                        </form>
                    </div>
                }
            </div>
        </div>
    </div>


    <!-- Pop-up zamówień -->
    <div class="admin-db-popup" id="ordersPopup">
        <div class="admin-db-popup-content admin-db-popup-large">
            <span class="admin-db-close" onclick="closePopup('ordersPopup')">&times;</span>
            <h3 class="popup-title">Zamówienia</h3>
            <form id="searchOrdersForm" class="admin-db-search">
                <input type="text" id="searchOrdersInput" placeholder="Wyszukaj zamówienie..." class="admin-db-input" />
                <button type="button" id="searchOrdersButton" class="btn-login">Szukaj</button>
            </form>
            <div class="orders-scroll">
                <table class="orders-table">
                    <thead>
                        <tr>
                            <th>ID Zamówienia</th>
                            <th>Użytkownik</th>
                            <th>Produkty</th>
                            <th>Data</th>
                            <th>Status</th>
                            <th>Akcje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model.Orders)
                        {
                            <tr>
                                <td>@order.Id</td>
                                <td>@order.User?.Name (@order.User?.Email)</td>
                                <td>
                                    <ul class="order-items">
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <li>@item.Product?.Name - @item.Quantity szt.</li>
                                        }
                                    </ul>
                                </td>
                                <td>@order.OrderDate.ToShortDateString()</td>
                                <td>@order.Status</td>
                                <td>
                                    <form method="post" asp-action="UpdateOrderStatus" class="status-form">
                                        <input type="hidden" name="orderId" value="@order.Id" />
                                        <select name="newStatus" class="status-select">
                                            <option value="Pending" selected="@(order.Status == "Pending" ? "selected" : null)">Oczekujące</option>
                                            <option value="Confirmed" selected="@(order.Status == "Confirmed" ? "selected" : null)">Potwierdzone</option>
                                            <option value="Shipped" selected="@(order.Status == "Shipped" ? "selected" : null)">Wysłane</option>
                                            <option value="Cancelled" selected="@(order.Status == "Cancelled" ? "selected" : null)">Anulowane</option>
                                        </select>
                                        <button type="submit" class="btn-update">Zmień</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="admin-db-popup" id="addProductPopup">
        <div class="admin-db-popup-content admin-db-popup-medium styled-popup">
            <span class="admin-db-close" onclick="closePopup('addProductPopup')">&times;</span>
            <h3 class="popup-title">Dodaj nowy produkt</h3>
            <form method="post" asp-action="AddProduct" class="form-styled">
                <div class="form-group">
                    <label for="Name" class="form-label">Nazwa produktu:</label>
                    <input id="Name" name="Name" type="text" class="admin-db-input styled-input" placeholder="Wprowadź nazwę produktu" required />
                </div>
                <div class="form-group">
                    <label for="Price" class="form-label">Cena (z kropką):</label>
                    <input id="Price" name="Price" type="number" step="0.01" class="admin-db-input styled-input" placeholder="Np. 19.99" required />
                </div>
                <div class="form-group">
                    <label for="Description" class="form-label">Opis produktu:</label>
                    <textarea id="Description" name="Description" class="admin-db-input styled-textarea" placeholder="Dodaj krótki opis produktu"></textarea>
                </div>
                <div class="form-group">
                    <label for="Stock" class="form-label">Stan magazynowy:</label>
                    <input id="Stock" name="Stock" type="number" class="admin-db-input styled-input" placeholder="Ilość sztuk w magazynie" required />
                </div>
                <div class="form-group">
                    <label for="CategoryId" class="form-label">Kategoria:</label>
                    <select id="CategoryId" name="CategoryId" class="admin-db-input styled-select" required>
                        <option value="" disabled selected>Wybierz kategorię</option>
                        @foreach (var category in ViewBag.Categories as List<ProjektZal.Models.Category>)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-login">Dodaj produkt</button>
                </div>
            </form>
        </div>
    </div>



    <!-- Popup do edycji produktu -->
    <div class="admin-db-popup" id="editProductPopup">
        <div class="admin-db-popup-content admin-db-popup-medium styled-popup">
            <span class="admin-db-close" onclick="closePopup('editProductPopup')">&times;</span>
            <h3 class="popup-title">Edytuj produkt</h3>
            <form method="post" asp-action="EditProduct" class="form-styled">
                <input type="hidden" id="editProductId" name="Id" />
                <div class="form-group">
                    <label for="editProductName" class="form-label">Nazwa produktu:</label>
                    <input id="editProductName" name="Name" type="text" class="admin-db-input styled-input" placeholder="Wprowadź nazwę produktu" required />
                </div>
                <div class="form-group">
                    <label for="editProductPrice" class="form-label">Cena (z kropką):</label>
                    <input id="editProductPrice" name="Price" type="number" step="0.01" class="admin-db-input styled-input" placeholder="Np. 19.99" required />
                </div>
                <div class="form-group">
                    <label for="editProductDescription" class="form-label">Opis produktu:</label>
                    <textarea id="editProductDescription" name="Description" class="admin-db-input styled-textarea" placeholder="Dodaj krótki opis produktu"></textarea>
                </div>
                <div class="form-group">
                    <label for="editProductStock" class="form-label">Stan magazynowy:</label>
                    <input id="editProductStock" name="Stock" type="number" class="admin-db-input styled-input" placeholder="Ilość sztuk w magazynie" required />
                </div>
                <div class="form-group">
                    <label for="editProductCategory" class="form-label">Kategoria:</label>
                    <select id="editProductCategory" name="CategoryId" class="admin-db-input styled-select" required>
                        <option value="" disabled selected>Wybierz kategorię</option>
                        @foreach (var category in ViewBag.Categories as List<ProjektZal.Models.Category>)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-login">Zapisz zmiany</button>
                </div>
            </form>
        </div>
    </div>



</main>

@section Scripts {
    <script>
                 async function renderChart() {
            try {
                const response = await fetch('/Admin/GetOrdersStats');
                if (!response.ok) {
                    throw new Error(`Błąd HTTP: ${response.status}`);
                }
                const data = await response.json();

                // Sprawdzenie, czy dane istnieją i są poprawne
                if (!Array.isArray(data) || data.length === 0) {
                    console.error("Brak danych do wyświetlenia na wykresie");
                    return;
                }

                // Mapowanie danych na etykiety i wartości
                const labels = [];
                const values = [];
                const daysBack = 7;
                const currentDate = new Date();

                // Tworzenie etykiet z ostatnich 14 dni
                for (let i = daysBack; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(currentDate.getDate() - i);
                    const formattedDate = date.toISOString().split('T')[0];
                    labels.push(formattedDate);

                    // Pobierz liczbę zamówień dla tego dnia lub 0, jeśli brak
                    const orderForDay = data.find(order => order.orderDate === formattedDate);
                    values.push(orderForDay ? orderForDay.orderCount : 0);
                }

                // Pobierz element canvas
                const ctx = document.getElementById('ordersChart').getContext('2d');

                // Utwórz wykres
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Liczba zamówień',
                            data: values,
                            backgroundColor: 'rgba(115, 50, 148, 0.5)',
                            borderColor: 'rgba(115, 50, 148, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        return `${context.raw} zamówień`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                stepSize: 1, // Krok osi Y
                                ticks: {
                                    stepSize: 1 // Dodatkowe wymuszenie kroku osi Y
                                },
                                title: {
                                    display: true,
                                    text: 'Liczba zamówień'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Data'
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error("Błąd podczas pobierania lub przetwarzania danych:", error);
            }
        }

        // Wywołanie funkcji po załadowaniu strony
        document.addEventListener('DOMContentLoaded', renderChart);








            document.getElementById('searchUsersButton').addEventListener('click', function () {
            const searchQuery = document.getElementById('searchUsersInput').value;

            // Wysyłanie żądania AJAX
            fetch(`/Admin/SearchUsers?searchQuery=${encodeURIComponent(searchQuery)}`)
                .then(response => response.json())
                .then(users => {
                    const usersList = document.getElementById('usersList');
                    usersList.innerHTML = '';
                    if (users.length === 0) {
                        usersList.innerHTML = `
                            <div class="no-users-message">
                                <p>Brak użytkowników do wyświetlenia.</p>
                            </div>`;
                    } else {
                        users.forEach(user => {
                            const userCard = document.createElement('div');
                            userCard.className = 'user-card';
                            userCard.innerHTML = `
                                <p><strong>Imię:</strong> ${user.name}</p>
                                <p><strong>Email:</strong> ${user.email}</p>
                                <form method="post" action="/Admin/DeleteUser" class="delete-form">
                                    <input type="hidden" name="id" value="${user.id}" />
                                    <button type="submit" class="btn-delete">Usuń</button>
                                </form>
                            `;
                            usersList.appendChild(userCard);
                        });
                    }
                })
                .catch(error => {
                    console.error("Błąd podczas wyszukiwania użytkowników:", error);
                });
        });
                     document.getElementById('searchProductsButton').addEventListener('click', function () {
            const searchQuery = document.getElementById('searchProductsInput').value;

            // Wysyłanie żądania AJAX
            fetch(`/Admin/SearchProducts?searchQuery=${encodeURIComponent(searchQuery)}`)
                .then(response => response.json())
                .then(products => {
                    const productsList = document.getElementById('productsList');
                    productsList.innerHTML = ''; // Wyczyść listę produktów

                    if (products.length === 0) {
                        productsList.innerHTML = `
                            <div class="no-products-message">
                                <p>Brak produktów do wyświetlenia.</p>
                            </div>`;
                    } else {
                        products.forEach(product => {
                            const productCard = document.createElement('div');
                            productCard.className = 'product-card';
                            productCard.innerHTML = `
                                <h4>${product.name}</h4>
                                <p><strong>Cena:</strong> ${product.price} zł</p>
                                <p><strong>Stan:</strong> ${product.stock} szt.</p>
                                <p>${product.description}</p>
                                <button class="btn-edit" onclick="openEditPopup(${product.id})">Edytuj</button>
                                <form method="post" action="/Admin/DeleteProduct" style="display: inline;">
                                    <input type="hidden" name="id" value="${product.id}" />
                                    <button type="submit" class="btn-delete"
                                            onclick="return confirm('Czy na pewno chcesz usunąć ten produkt?')">
                                        Usuń
                                    </button>
                                </form>
                            `;
                            productsList.appendChild(productCard);
                        });
                    }
                })
                .catch(error => {
                    console.error("Błąd podczas wyszukiwania produktów:", error);
                });
        });

                    document.getElementById('searchOrdersButton').addEventListener('click', function () {
            const searchQuery = document.getElementById('searchOrdersInput').value;

            // Wysyłanie żądania AJAX
            fetch(`/Admin/SearchOrders?searchQuery=${encodeURIComponent(searchQuery)}`)
                .then(response => response.json())
                .then(orders => {
                    const ordersList = document.querySelector('.orders-table tbody');
                    ordersList.innerHTML = ''; // Wyczyść tabelę zamówień

                    if (orders.length === 0) {
                        ordersList.innerHTML = `
                            <tr>
                                <td colspan="6" class="no-orders-message">Brak zamówień do wyświetlenia.</td>
                            </tr>`;
                    } else {
                        orders.forEach(order => {
                            const orderRow = document.createElement('tr');
                            orderRow.innerHTML = `
                                <td>${order.id}</td>
                                <td>${order.userName} (${order.userEmail})</td>
                                <td>
                                    <ul class="order-items">
                                        ${order.orderItems
                                            .map(item => `<li>${item.name} - ${item.quantity} szt.</li>`)
                                            .join('')}
                                    </ul>
                                </td>
                                <td>${order.orderDate}</td>
                                <td>${order.status}</td>
                                <td>
                                    <form method="post" action="/Admin/UpdateOrderStatus" class="status-form">
                                        <input type="hidden" name="orderId" value="${order.id}" />
                                        <select name="newStatus" class="status-select">
                                            <option value="Pending" ${
                                                order.status === 'Pending' ? 'selected' : ''
                                            }>Oczekujące</option>
                                            <option value="Confirmed" ${
                                                order.status === 'Confirmed' ? 'selected' : ''
                                            }>Potwierdzone</option>
                                            <option value="Shipped" ${
                                                order.status === 'Shipped' ? 'selected' : ''
                                            }>Wysłane</option>
                                            <option value="Cancelled" ${
                                                order.status === 'Cancelled' ? 'selected' : ''
                                            }>Anulowane</option>
                                        </select>
                                        <button type="submit" class="btn-update">Zmień</button>
                                    </form>
                                </td>
                            `;
                            ordersList.appendChild(orderRow);
                        });
                    }
                })
                .catch(error => {
                    console.error('Błąd podczas wyszukiwania zamówień:', error);
                });
        });

        function openEditPopup(productId) {
            fetch(`/Admin/GetProduct/${productId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('editProductId').value = data.id;
                    document.getElementById('editProductName').value = data.name;
                    document.getElementById('editProductPrice').value = data.price;
                    document.getElementById('editProductDescription').value = data.description;
                    document.getElementById('editProductStock').value = data.stock;
                    document.getElementById('editProductCategory').value = data.categoryId;

                    document.getElementById('editProductPopup').style.display = 'block';
                });
        }
        function openPopup(popupId) {
            document.getElementById(popupId).style.display = "block";
        }

        function closePopup(popupId) {
            document.getElementById(popupId).style.display = "none";
        }

        document.getElementById('usersButton').addEventListener('click', function () {
            openPopup('usersPopup');
        });

        document.getElementById('productsButton').addEventListener('click', function () {
            openPopup('productsPopup');
        });

        document.getElementById('ordersButton').addEventListener('click', function () {
            openPopup('ordersPopup');
        });
        document.getElementById('addProductButton').addEventListener('click', function () {
            openPopup('addProductPopup');
        });
    </script>
}
