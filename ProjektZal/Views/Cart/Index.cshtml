@model IEnumerable<ProjektZal.Models.Cart>

<style>

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }


    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: radial-gradient(circle, #1c093a, #000);
        color: #ccc;
        min-height: 100vh;
        padding: 20px;
    }


    h2 {
        color: #f8f8f8;
        margin-bottom: 20px;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        background: #1f1f2e; 
        margin: 0 auto 20px;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.5);
    }

    thead {
        background: #27273a; 
    }

        thead th {
            color: #bbb;
            text-transform: uppercase;
            font-weight: 600;
            letter-spacing: 0.5px;
            padding: 12px 16px;
            border-bottom: 1px solid #333;
        }

    tbody tr {
        border-bottom: 1px solid #333;
    }

    tbody td {
        padding: 12px 16px;
        color: #ddd;
    }

  
    tbody tr:hover {
        background-color: #2d2d44;
        transition: background-color 0.3s ease;
    }


    .btn {
        display: inline-block;
        padding: 8px 14px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: 600;
        border: none;
        color: #fff;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    
    .btn-danger {
        background: linear-gradient(135deg, #ff416c, #ff4b2b); 
    }

        .btn-danger:hover {
            background: linear-gradient(135deg, #ff4b2b, #ff416c);
            transform: scale(1.05);
        }

 
    .btn-success {
        background: linear-gradient(135deg, #00b09b, #96c93d); /
    }

        .btn-success:hover {
            background: linear-gradient(135deg, #96c93d, #00b09b);
            transform: scale(1.05);
        }


</style>

<h2>Koszyk</h2>
@if (Model != null && Model.Any())
{
    <table>
        <thead>
            <tr>
                <th>Produkt</th>
                <th>Cena</th>
                <th>Ilość</th>
                <th>Razem</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr data-cart-id="@item.Id">
                    <td>@item.Product.Name</td>
                    <td>@item.Product.Price zł</td>
                    <td>@item.Quantity</td>
                    <td>@(item.Product.Price * item.Quantity) zł</td>
                    <td>
                        <button class="remove-from-cart btn btn-danger">Usuń</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button id="confirm-order" class="btn btn-success">Dodaj zamówienie</button>
}
else
{
    <p>Twój koszyk jest pusty.</p>
}

<script>
    document.querySelectorAll('.remove-from-cart').forEach(button => {
        button.addEventListener('click', async (e) => {
            const cartId = e.target.closest('tr').getAttribute('data-cart-id');

            try {
                const response = await fetch('/Cart/Remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cartId: parseInt(cartId) })
                });

                const result = await response.json();
                if (result.success) {
                    alert('Produkt został usunięty z koszyka.');
                    e.target.closest('tr').remove();
                    updateCartCount(result.totalItems);
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Błąd:', error);
            }
        });
    });

    document.getElementById('confirm-order').addEventListener('click', async () => {
        try {
            const response = await fetch('/Cart/ConfirmOrder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();
            if (result.success) {
                alert(result.message);
                document.querySelector('tbody').innerHTML = '';
                updateCartCount(0);
            } else {
                alert(result.message || 'Wystąpił błąd podczas dodawania zamówienia.');
            }
        } catch (error) {
            console.error('Błąd:', error);
        }
    });

    function updateCartCount(count) {
        const cartCounter = document.getElementById('cart-counter');
        if (cartCounter) {
            cartCounter.textContent = count;
        }
    }
</script>